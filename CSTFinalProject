{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XJIJbBEIrSUy"
      },
      "source": [
        "# Set Up"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "I3eJv2canJsC"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn import preprocessing\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.preprocessing import StandardScaler,OneHotEncoder,OrdinalEncoder, LabelEncoder\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "from sklearn.pipeline import Pipeline,make_pipeline, FeatureUnion\n",
        "from sklearn.compose import ColumnTransformer, make_column_transformer\n",
        "from sklearn.linear_model import LinearRegression, LogisticRegression\n",
        "from sklearn.feature_selection import SelectPercentile, chi2\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
        "from sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer\n",
        "from sklearn.ensemble import RandomForestClassifier"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SA79Kez-pn9P"
      },
      "source": [
        "Google Drive Access"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "apEkhqn5pzky",
        "outputId": "ed83d5c0-7552-4515-b7e4-78811011a27e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import auth\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "import gspread\n",
        "from google.auth import default\n",
        "# authenticate\n",
        "auth.authenticate_user()\n",
        "from oauth2client.client import GoogleCredentials as GC\n",
        "# gc = gspread.authorize(GC.get_application_default())\n",
        "creds, _ = default()\n",
        "gc = gspread.authorize(creds)\n",
        "# create, and save df\n",
        "from gspread_dataframe import set_with_dataframe"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HmrOLYgsre_w"
      },
      "source": [
        "# Load Data\n",
        "###### By Claudia Pascual"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "priL1nB_qT2T",
        "outputId": "7c150a5a-5194-46b4-8c03-88a85e0fdc85"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/My Drive/archive\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index  Unnamed: 0        country  abortion  abuse  accident  accuse    act  \\\n",
              "0      0           0  All countries       NaN   56.0       NaN    21.0  152.0   \n",
              "1      1           1          India       NaN   66.0       NaN    22.0  137.0   \n",
              "2      2           2   South Africa       NaN   23.0     175.0    16.0    NaN   \n",
              "3      3           3             UK     141.0   47.0       NaN    39.0  152.0   \n",
              "4      4           4            USA     186.0   74.0       NaN    13.0  184.0   \n",
              "\n",
              "   actor  actress  ...   win  witness  wonder  work  write   york  young  \\\n",
              "0    NaN    104.0  ...  30.0      NaN    48.0  25.0  108.0  112.0   24.0   \n",
              "1  106.0     80.0  ...  23.0      NaN    68.0  16.0   81.0   87.0   25.0   \n",
              "2    NaN    133.0  ...  43.0    182.0     NaN  67.0    NaN    NaN   26.0   \n",
              "3    NaN    161.0  ...  42.0      NaN    45.0  34.0  138.0    NaN   20.0   \n",
              "4    NaN    130.0  ...  32.0      NaN    43.0  29.0  153.0   93.0   34.0   \n",
              "\n",
              "     zim  zodwa  zuma  \n",
              "0    NaN    NaN   NaN  \n",
              "1    NaN    NaN   NaN  \n",
              "2  164.0  123.0  41.0  \n",
              "3    NaN    NaN   NaN  \n",
              "4    NaN    NaN   NaN  \n",
              "\n",
              "[5 rows x 348 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f7707248-9d89-41a4-8054-2a7295716bbc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>country</th>\n",
              "      <th>abortion</th>\n",
              "      <th>abuse</th>\n",
              "      <th>accident</th>\n",
              "      <th>accuse</th>\n",
              "      <th>act</th>\n",
              "      <th>actor</th>\n",
              "      <th>actress</th>\n",
              "      <th>...</th>\n",
              "      <th>win</th>\n",
              "      <th>witness</th>\n",
              "      <th>wonder</th>\n",
              "      <th>work</th>\n",
              "      <th>write</th>\n",
              "      <th>york</th>\n",
              "      <th>young</th>\n",
              "      <th>zim</th>\n",
              "      <th>zodwa</th>\n",
              "      <th>zuma</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>All countries</td>\n",
              "      <td>NaN</td>\n",
              "      <td>56.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>21.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>104.0</td>\n",
              "      <td>...</td>\n",
              "      <td>30.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>48.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>108.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>India</td>\n",
              "      <td>NaN</td>\n",
              "      <td>66.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>22.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>106.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>...</td>\n",
              "      <td>23.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>68.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>81.0</td>\n",
              "      <td>87.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>NaN</td>\n",
              "      <td>23.0</td>\n",
              "      <td>175.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>133.0</td>\n",
              "      <td>...</td>\n",
              "      <td>43.0</td>\n",
              "      <td>182.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>67.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>26.0</td>\n",
              "      <td>164.0</td>\n",
              "      <td>123.0</td>\n",
              "      <td>41.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>UK</td>\n",
              "      <td>141.0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>39.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>161.0</td>\n",
              "      <td>...</td>\n",
              "      <td>42.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>45.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>138.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>20.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>USA</td>\n",
              "      <td>186.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>13.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>130.0</td>\n",
              "      <td>...</td>\n",
              "      <td>32.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>43.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>153.0</td>\n",
              "      <td>93.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 348 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7707248-9d89-41a4-8054-2a7295716bbc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f7707248-9d89-41a4-8054-2a7295716bbc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f7707248-9d89-41a4-8054-2a7295716bbc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "#access specific folder with all the csv files\n",
        "%cd /content/drive/My Drive/archive/\n",
        "wCf = pd.read_csv(\"word_country_freq.csv\")\n",
        "wCf\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l_eGKd9wsezS"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "6ZdZohpzvJcS",
        "outputId": "3b3c9fc7-591b-4fa6-c80e-2758d3d268b3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "abortion  141.0  186.0\n",
              "country               \n",
              "UK            1      0\n",
              "USA           0      1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e4e7d57-711b-4b7c-b514-77c392d20504\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>abortion</th>\n",
              "      <th>141.0</th>\n",
              "      <th>186.0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>UK</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>USA</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e4e7d57-711b-4b7c-b514-77c392d20504')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8e4e7d57-711b-4b7c-b514-77c392d20504 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8e4e7d57-711b-4b7c-b514-77c392d20504');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "table = pd.crosstab(wCf[\"country\"], wCf[\"abortion\"])\n",
        "table"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "oDSBjhHSsEap",
        "outputId": "c8901a42-447c-47b8-d3a5-d2909b93efb1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      index  Unnamed: 0      word                         theme\n",
              "0         0          26   abandon                      No theme\n",
              "1         1          35    abduct            crime and violence\n",
              "2         2          62  abortion                   empowerment\n",
              "3         3          79     abuse            crime and violence\n",
              "4         4          99  accident            crime and violence\n",
              "...     ...         ...       ...                           ...\n",
              "1476   1476       33338      wale                      No theme\n",
              "1477   1477       33414    watson             people and places\n",
              "1478   1478       33431   weather                      No theme\n",
              "1479   1479       33467     welsh  race, ethnicity and identity\n",
              "1480   1480       33577   windsor             people and places\n",
              "\n",
              "[1481 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bbbbf7ef-f07d-4aad-9f6d-062c5a62c5ff\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>word</th>\n",
              "      <th>theme</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>26</td>\n",
              "      <td>abandon</td>\n",
              "      <td>No theme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>35</td>\n",
              "      <td>abduct</td>\n",
              "      <td>crime and violence</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>62</td>\n",
              "      <td>abortion</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>79</td>\n",
              "      <td>abuse</td>\n",
              "      <td>crime and violence</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>99</td>\n",
              "      <td>accident</td>\n",
              "      <td>crime and violence</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1476</th>\n",
              "      <td>1476</td>\n",
              "      <td>33338</td>\n",
              "      <td>wale</td>\n",
              "      <td>No theme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1477</th>\n",
              "      <td>1477</td>\n",
              "      <td>33414</td>\n",
              "      <td>watson</td>\n",
              "      <td>people and places</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1478</th>\n",
              "      <td>1478</td>\n",
              "      <td>33431</td>\n",
              "      <td>weather</td>\n",
              "      <td>No theme</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1479</th>\n",
              "      <td>1479</td>\n",
              "      <td>33467</td>\n",
              "      <td>welsh</td>\n",
              "      <td>race, ethnicity and identity</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1480</th>\n",
              "      <td>1480</td>\n",
              "      <td>33577</td>\n",
              "      <td>windsor</td>\n",
              "      <td>people and places</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1481 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbbbf7ef-f07d-4aad-9f6d-062c5a62c5ff')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bbbbf7ef-f07d-4aad-9f6d-062c5a62c5ff button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bbbbf7ef-f07d-4aad-9f6d-062c5a62c5ff');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "wT = pd.read_csv(\"word_themes.csv\")\n",
        "wT"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "vdM4PsKsvRwW"
      },
      "outputs": [],
      "source": [
        "#wD = pd.read_csv(\"word_dictionaries.csv\")\n",
        "#wD"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "dhqcx545Zl4-",
        "outputId": "621fd944-436d-4524-c13a-f9e96a3b620b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      index  Unnamed: 0  Unnamed: 0.1  year        country       word  \\\n",
              "0         0          12           277  2010          India  cricketer   \n",
              "1         1          13           278  2011          India  cricketer   \n",
              "2         2          14           279  2012          India  cricketer   \n",
              "3         3          15           280  2013          India  cricketer   \n",
              "4         4          16           281  2014          India  cricketer   \n",
              "...     ...         ...           ...   ...            ...        ...   \n",
              "7615   7615       11215         65746  2017  all countries       sexy   \n",
              "7616   7616       11216         65747  2018  all countries       sexy   \n",
              "7617   7617       11217         65748  2019  all countries       sexy   \n",
              "7618   7618       11218         65749  2020  all countries       sexy   \n",
              "7619   7619       11219         65750  2021  all countries       sexy   \n",
              "\n",
              "      frequency   count  freq_prop_headlines  word_len  freq_rank  hfreq_rank  \\\n",
              "0             0    1584             0.000000         9         20          20   \n",
              "1             0    2438             0.000000         9         20          20   \n",
              "2             0    3634             0.000000         9         20          20   \n",
              "3             4    4910             0.000815         9         20          20   \n",
              "4             6    7502             0.000800         9         20          20   \n",
              "...         ...     ...                  ...       ...        ...         ...   \n",
              "7615        243  312298             0.000778         4        941         941   \n",
              "7616        159  352387             0.000451         4        941         941   \n",
              "7617        159  380716             0.000418         4        941         941   \n",
              "7618        114  381402             0.000299         4        941         941   \n",
              "7619         51  234227             0.000218         4        941         941   \n",
              "\n",
              "                   theme  \n",
              "0            empowerment  \n",
              "1            empowerment  \n",
              "2            empowerment  \n",
              "3            empowerment  \n",
              "4            empowerment  \n",
              "...                  ...  \n",
              "7615  female stereotypes  \n",
              "7616  female stereotypes  \n",
              "7617  female stereotypes  \n",
              "7618  female stereotypes  \n",
              "7619  female stereotypes  \n",
              "\n",
              "[7620 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e171380-cedc-4b77-885b-db5641ab9a2c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Unnamed: 0.1</th>\n",
              "      <th>year</th>\n",
              "      <th>country</th>\n",
              "      <th>word</th>\n",
              "      <th>frequency</th>\n",
              "      <th>count</th>\n",
              "      <th>freq_prop_headlines</th>\n",
              "      <th>word_len</th>\n",
              "      <th>freq_rank</th>\n",
              "      <th>hfreq_rank</th>\n",
              "      <th>theme</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>277</td>\n",
              "      <td>2010</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>0</td>\n",
              "      <td>1584</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>278</td>\n",
              "      <td>2011</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>0</td>\n",
              "      <td>2438</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>279</td>\n",
              "      <td>2012</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>0</td>\n",
              "      <td>3634</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "      <td>280</td>\n",
              "      <td>2013</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>4</td>\n",
              "      <td>4910</td>\n",
              "      <td>0.000815</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>16</td>\n",
              "      <td>281</td>\n",
              "      <td>2014</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>6</td>\n",
              "      <td>7502</td>\n",
              "      <td>0.000800</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7615</th>\n",
              "      <td>7615</td>\n",
              "      <td>11215</td>\n",
              "      <td>65746</td>\n",
              "      <td>2017</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>243</td>\n",
              "      <td>312298</td>\n",
              "      <td>0.000778</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "      <td>female stereotypes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7616</th>\n",
              "      <td>7616</td>\n",
              "      <td>11216</td>\n",
              "      <td>65747</td>\n",
              "      <td>2018</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>159</td>\n",
              "      <td>352387</td>\n",
              "      <td>0.000451</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "      <td>female stereotypes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7617</th>\n",
              "      <td>7617</td>\n",
              "      <td>11217</td>\n",
              "      <td>65748</td>\n",
              "      <td>2019</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>159</td>\n",
              "      <td>380716</td>\n",
              "      <td>0.000418</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "      <td>female stereotypes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7618</th>\n",
              "      <td>7618</td>\n",
              "      <td>11218</td>\n",
              "      <td>65749</td>\n",
              "      <td>2020</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>114</td>\n",
              "      <td>381402</td>\n",
              "      <td>0.000299</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "      <td>female stereotypes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7619</th>\n",
              "      <td>7619</td>\n",
              "      <td>11219</td>\n",
              "      <td>65750</td>\n",
              "      <td>2021</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>51</td>\n",
              "      <td>234227</td>\n",
              "      <td>0.000218</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "      <td>female stereotypes</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7620 rows × 13 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e171380-cedc-4b77-885b-db5641ab9a2c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-9e171380-cedc-4b77-885b-db5641ab9a2c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-9e171380-cedc-4b77-885b-db5641ab9a2c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "cTf = pd.read_csv(\"country_time_freqrank.csv\")\n",
        "cTf"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4ViQSBbfGThi"
      },
      "source": [
        "IDEA: Using country_time_frequnecy to train data &  headlines to train model\n",
        "-Then test using the headlines split test data.\n",
        "--Note 3 different headlines"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "SB2jVFV0EbKI"
      },
      "outputs": [],
      "source": [
        "headlines = pd.read_csv(\"headlines.csv\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Lh8KHs27Bd-x"
      },
      "source": [
        "# Clean Data\n",
        "###### By Trisha Agrawal\n",
        "The data was cleaned by removing unnecessary values, repeated columns, and rows with values that would negatively impact our research (such as words being assigned no theme)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "Q-yGwydcBf8w",
        "outputId": "338d83c7-4b47-44ef-b750-aabafe86a3da"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               abortion  abuse  accident  accuse    act  actor  actress  \\\n",
              "country                                                                   \n",
              "All countries       0.0   56.0       0.0    21.0  152.0    0.0    104.0   \n",
              "India               0.0   66.0       0.0    22.0  137.0  106.0     80.0   \n",
              "South Africa        0.0   23.0     175.0    16.0    0.0    0.0    133.0   \n",
              "UK                141.0   47.0       0.0    39.0  152.0    0.0    161.0   \n",
              "USA               186.0   74.0       0.0    13.0  184.0    0.0    130.0   \n",
              "\n",
              "               admit  africa  african  ...   win  witness  wonder  work  \\\n",
              "country                                ...                                \n",
              "All countries  124.0     0.0      0.0  ...  30.0      0.0    48.0  25.0   \n",
              "India            0.0     0.0      0.0  ...  23.0      0.0    68.0  16.0   \n",
              "South Africa     0.0    29.0     42.0  ...  43.0    182.0     0.0  67.0   \n",
              "UK              67.0     0.0      0.0  ...  42.0      0.0    45.0  34.0   \n",
              "USA            143.0     0.0      0.0  ...  32.0      0.0    43.0  29.0   \n",
              "\n",
              "               write   york  young    zim  zodwa  zuma  \n",
              "country                                                 \n",
              "All countries  108.0  112.0   24.0    0.0    0.0   0.0  \n",
              "India           81.0   87.0   25.0    0.0    0.0   0.0  \n",
              "South Africa     0.0    0.0   26.0  164.0  123.0  41.0  \n",
              "UK             138.0    0.0   20.0    0.0    0.0   0.0  \n",
              "USA            153.0   93.0   34.0    0.0    0.0   0.0  \n",
              "\n",
              "[5 rows x 345 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fd0a992d-476a-4ced-a96d-5761a394e9fb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>abortion</th>\n",
              "      <th>abuse</th>\n",
              "      <th>accident</th>\n",
              "      <th>accuse</th>\n",
              "      <th>act</th>\n",
              "      <th>actor</th>\n",
              "      <th>actress</th>\n",
              "      <th>admit</th>\n",
              "      <th>africa</th>\n",
              "      <th>african</th>\n",
              "      <th>...</th>\n",
              "      <th>win</th>\n",
              "      <th>witness</th>\n",
              "      <th>wonder</th>\n",
              "      <th>work</th>\n",
              "      <th>write</th>\n",
              "      <th>york</th>\n",
              "      <th>young</th>\n",
              "      <th>zim</th>\n",
              "      <th>zodwa</th>\n",
              "      <th>zuma</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>All countries</th>\n",
              "      <td>0.0</td>\n",
              "      <td>56.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>124.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>30.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>48.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>108.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>India</th>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>137.0</td>\n",
              "      <td>106.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>23.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>68.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>81.0</td>\n",
              "      <td>87.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>South Africa</th>\n",
              "      <td>0.0</td>\n",
              "      <td>23.0</td>\n",
              "      <td>175.0</td>\n",
              "      <td>16.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>42.0</td>\n",
              "      <td>...</td>\n",
              "      <td>43.0</td>\n",
              "      <td>182.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>164.0</td>\n",
              "      <td>123.0</td>\n",
              "      <td>41.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>UK</th>\n",
              "      <td>141.0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>152.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>161.0</td>\n",
              "      <td>67.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>42.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>138.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>USA</th>\n",
              "      <td>186.0</td>\n",
              "      <td>74.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>184.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>130.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>29.0</td>\n",
              "      <td>153.0</td>\n",
              "      <td>93.0</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 345 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fd0a992d-476a-4ced-a96d-5761a394e9fb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fd0a992d-476a-4ced-a96d-5761a394e9fb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fd0a992d-476a-4ced-a96d-5761a394e9fb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "# drop NA values so only valid rows are considered in algorithms\n",
        "wCf = wCf.fillna(0)\n",
        "# drop column that is a copy of the index column\n",
        "wCf = wCf.drop(['Unnamed: 0','index'],axis=1)\n",
        "# set index to country name\n",
        "wCf = wCf.set_index('country')\n",
        "wCf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "abbqrLHcxPmz",
        "outputId": "81acf338-80d9-4492-c740-b62f00a62893"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           word                         theme\n",
              "index                                        \n",
              "1        abduct            crime and violence\n",
              "2      abortion                   empowerment\n",
              "3         abuse            crime and violence\n",
              "4      accident            crime and violence\n",
              "6        accuse            crime and violence\n",
              "...         ...                           ...\n",
              "1473   victoria             people and places\n",
              "1475    violent            crime and violence\n",
              "1477     watson             people and places\n",
              "1479      welsh  race, ethnicity and identity\n",
              "1480    windsor             people and places\n",
              "\n",
              "[684 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4c94df7a-3b8a-4cee-bc38-76e09be62eb7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>word</th>\n",
              "      <th>theme</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>index</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>abduct</td>\n",
              "      <td>crime and violence</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>abortion</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>abuse</td>\n",
              "      <td>crime and violence</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>accident</td>\n",
              "      <td>crime and violence</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>accuse</td>\n",
              "      <td>crime and violence</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1473</th>\n",
              "      <td>victoria</td>\n",
              "      <td>people and places</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1475</th>\n",
              "      <td>violent</td>\n",
              "      <td>crime and violence</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1477</th>\n",
              "      <td>watson</td>\n",
              "      <td>people and places</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1479</th>\n",
              "      <td>welsh</td>\n",
              "      <td>race, ethnicity and identity</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1480</th>\n",
              "      <td>windsor</td>\n",
              "      <td>people and places</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>684 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c94df7a-3b8a-4cee-bc38-76e09be62eb7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4c94df7a-3b8a-4cee-bc38-76e09be62eb7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4c94df7a-3b8a-4cee-bc38-76e09be62eb7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "# removing \"No theme\" values from data set to focus on words with themes\n",
        "wT = wT[wT.theme != \"No theme\"]\n",
        "# drop column that is a copy of the index column\n",
        "wT = wT.drop('Unnamed: 0',axis=1)\n",
        "# set index to be index column\n",
        "wT = wT.set_index('index')\n",
        "wT"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "58vues8Mc-Dw",
        "outputId": "95060493-140f-4a5a-c16e-b4eaba4b5f59"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                      url  \\\n",
              "index                                                       \n",
              "0       https://www.iol.co.za/entertainment/movies-the...   \n",
              "1       https://www.iol.co.za/entertainment/music/the-...   \n",
              "2       https://www.iol.co.za/entertainment/celebrity-...   \n",
              "3       https://www.iol.co.za/news/south-africa/wester...   \n",
              "4       https://www.iol.co.za/business-report/careers/...   \n",
              "...                                                   ...   \n",
              "382134  https://www.makeuseof.com/siri-no-longer-defau...   \n",
              "382135  https://www.cbn.co.za/featured/the-impact-of-c...   \n",
              "382136  https://www.cbn.co.za/featured/rand-air-commit...   \n",
              "382137  https://www.cbn.co.za/featured/mother-citys-la...   \n",
              "382138  https://www.cbn.co.za/featured/zar-strength-co...   \n",
              "\n",
              "                                         headline_no_site           site  \\\n",
              "index                                                                      \n",
              "0              'Lady Bird' buzzes through young sexuality      iol.co.za   \n",
              "1       The shadowy urban POP super Starrah who loves ...      iol.co.za   \n",
              "2       Rihanna pens heartfelt tribute to her mom in b...      iol.co.za   \n",
              "3       Shock as woman accused of killing teen girlfri...      iol.co.za   \n",
              "4       TOP STORY: Meet South Africa's new first lady ...      iol.co.za   \n",
              "...                                                   ...            ...   \n",
              "382134  Siri Will No Longer Default to a Female Voice ...  makeuseof.com   \n",
              "382135                    The impact of COVID 19 on women      cbn.co.za   \n",
              "382136  Rand Air committed to excellence in safety wit...      cbn.co.za   \n",
              "382137  Mother City's 'Lanseria': New airport in the p...      cbn.co.za   \n",
              "382138                             ZAR strength continues      cbn.co.za   \n",
              "\n",
              "                             time       country      bias  \n",
              "index                                                      \n",
              "0       2018-02-23 08:00:00+00:00  South Africa  0.000000  \n",
              "1       2018-01-10 08:00:00+00:00  South Africa  0.166667  \n",
              "2       2018-02-21 08:00:00+00:00  South Africa  0.333333  \n",
              "3       2018-02-27 08:00:00+00:00  South Africa  0.333333  \n",
              "4       2018-02-15 08:00:00+00:00  South Africa  0.166667  \n",
              "...                           ...           ...       ...  \n",
              "382134  2021-03-31 07:00:00+00:00            UK  0.166667  \n",
              "382135  2021-03-05 08:00:00+00:00  South Africa  0.166667  \n",
              "382136  2021-04-14 07:00:00+00:00  South Africa  0.166667  \n",
              "382137  2021-03-10 08:00:00+00:00  South Africa  0.166667  \n",
              "382138  2021-04-29 07:00:00+00:00  South Africa  0.000000  \n",
              "\n",
              "[382139 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e5396e7c-e93d-4be5-b476-8afe4cf1779e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>url</th>\n",
              "      <th>headline_no_site</th>\n",
              "      <th>site</th>\n",
              "      <th>time</th>\n",
              "      <th>country</th>\n",
              "      <th>bias</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>index</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>https://www.iol.co.za/entertainment/movies-the...</td>\n",
              "      <td>'Lady Bird' buzzes through young sexuality</td>\n",
              "      <td>iol.co.za</td>\n",
              "      <td>2018-02-23 08:00:00+00:00</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>https://www.iol.co.za/entertainment/music/the-...</td>\n",
              "      <td>The shadowy urban POP super Starrah who loves ...</td>\n",
              "      <td>iol.co.za</td>\n",
              "      <td>2018-01-10 08:00:00+00:00</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>0.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>https://www.iol.co.za/entertainment/celebrity-...</td>\n",
              "      <td>Rihanna pens heartfelt tribute to her mom in b...</td>\n",
              "      <td>iol.co.za</td>\n",
              "      <td>2018-02-21 08:00:00+00:00</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>https://www.iol.co.za/news/south-africa/wester...</td>\n",
              "      <td>Shock as woman accused of killing teen girlfri...</td>\n",
              "      <td>iol.co.za</td>\n",
              "      <td>2018-02-27 08:00:00+00:00</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>https://www.iol.co.za/business-report/careers/...</td>\n",
              "      <td>TOP STORY: Meet South Africa's new first lady ...</td>\n",
              "      <td>iol.co.za</td>\n",
              "      <td>2018-02-15 08:00:00+00:00</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>0.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>382134</th>\n",
              "      <td>https://www.makeuseof.com/siri-no-longer-defau...</td>\n",
              "      <td>Siri Will No Longer Default to a Female Voice ...</td>\n",
              "      <td>makeuseof.com</td>\n",
              "      <td>2021-03-31 07:00:00+00:00</td>\n",
              "      <td>UK</td>\n",
              "      <td>0.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>382135</th>\n",
              "      <td>https://www.cbn.co.za/featured/the-impact-of-c...</td>\n",
              "      <td>The impact of COVID 19 on women</td>\n",
              "      <td>cbn.co.za</td>\n",
              "      <td>2021-03-05 08:00:00+00:00</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>0.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>382136</th>\n",
              "      <td>https://www.cbn.co.za/featured/rand-air-commit...</td>\n",
              "      <td>Rand Air committed to excellence in safety wit...</td>\n",
              "      <td>cbn.co.za</td>\n",
              "      <td>2021-04-14 07:00:00+00:00</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>0.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>382137</th>\n",
              "      <td>https://www.cbn.co.za/featured/mother-citys-la...</td>\n",
              "      <td>Mother City's 'Lanseria': New airport in the p...</td>\n",
              "      <td>cbn.co.za</td>\n",
              "      <td>2021-03-10 08:00:00+00:00</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>0.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>382138</th>\n",
              "      <td>https://www.cbn.co.za/featured/zar-strength-co...</td>\n",
              "      <td>ZAR strength continues</td>\n",
              "      <td>cbn.co.za</td>\n",
              "      <td>2021-04-29 07:00:00+00:00</td>\n",
              "      <td>South Africa</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>382139 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5396e7c-e93d-4be5-b476-8afe4cf1779e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e5396e7c-e93d-4be5-b476-8afe4cf1779e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e5396e7c-e93d-4be5-b476-8afe4cf1779e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "# drop column that is a copy of the index column\n",
        "headlines = headlines.drop('Unnamed: 0',axis=1)\n",
        "headlines = headlines.set_index('index')\n",
        "headlines"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "zcDTJePmZzJq",
        "outputId": "7bb89e3c-fae5-4212-dcd9-ca09c656543b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      year        country       word  frequency\n",
              "0     2010          India  cricketer          0\n",
              "1     2011          India  cricketer          0\n",
              "2     2012          India  cricketer          0\n",
              "3     2013          India  cricketer          4\n",
              "4     2014          India  cricketer          6\n",
              "...    ...            ...        ...        ...\n",
              "7615  2017  all countries       sexy        243\n",
              "7616  2018  all countries       sexy        159\n",
              "7617  2019  all countries       sexy        159\n",
              "7618  2020  all countries       sexy        114\n",
              "7619  2021  all countries       sexy         51\n",
              "\n",
              "[7620 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-928cf8b8-d264-46d4-9c00-0698f5c93078\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>country</th>\n",
              "      <th>word</th>\n",
              "      <th>frequency</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2010</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2012</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2013</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2014</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7615</th>\n",
              "      <td>2017</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7616</th>\n",
              "      <td>2018</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>159</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7617</th>\n",
              "      <td>2019</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>159</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7618</th>\n",
              "      <td>2020</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7619</th>\n",
              "      <td>2021</td>\n",
              "      <td>all countries</td>\n",
              "      <td>sexy</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7620 rows × 4 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-928cf8b8-d264-46d4-9c00-0698f5c93078')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-928cf8b8-d264-46d4-9c00-0698f5c93078 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-928cf8b8-d264-46d4-9c00-0698f5c93078');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "cTf = cTf[['year','country','word','frequency']]\n",
        "cTf"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FCXgIzxSBgFf"
      },
      "source": [
        "# Data Visualization \n",
        "###### By Trisha Agrawal and Surya Brunton"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 392
        },
        "id": "0V2BkAwaiI9x",
        "outputId": "765cd008-402b-4bb0-c470-cd8c4915f478"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='country'>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 936x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# randomly pick 10 words to avoid our own bias\n",
        "cols = random.choices(list(wCf),k=10) \n",
        "plotdf = wCf[cols]\n",
        "# since cols is randomized every time, each heatmap is unique!\n",
        "plt.figure(figsize=(13,6))\n",
        "sns.heatmap(plotdf, annot=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###### Heatmap Explanation:\n",
        "The heatmap above is designed to randomly generate 10 words and display the likely usage of that word for each country. Some values, such as cities in one of the countries are usually only used in that country while other words could be used in every country."
      ],
      "metadata": {
        "id": "4TsPZNlKpyZh"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "Ubp7vQHowWhP",
        "outputId": "4cbdf2e0-97fc-4327-c536-d4d372c0fb47"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show(close=None, block=None)>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "headlinesTable = pd.crosstab(headlines[\"country\"], headlines[\"bias\"])\n",
        "headlinesTable.plot()\n",
        "plt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5),title='Bias Legend')\n",
        "plt.title('Bias Distribution in Each Country', color='black')\n",
        "plt.xlabel(\"Country\")\n",
        "plt.ylabel(\"Frequency of Bias\")\n",
        "plt.show"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "NEW **"
      ],
      "metadata": {
        "id": "bobzFyJMTDlK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# By Claudia Pascual NEW\n",
        "headlinesTable = pd.crosstab(headlines[\"bias\"],headlines[\"country\"])\n",
        "headlinesTable.plot()\n",
        "plt.legend(loc='center left', bbox_to_anchor=(1.0, 0.5),title='Bias Legend')\n",
        "plt.title('Bias Distribution per Country', color='black')\n",
        "plt.xlabel(\"Bias Score\")\n",
        "plt.ylabel(\"Frequency of Bias\")\n",
        "plt.show\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "nmKL7CIt9zvp",
        "outputId": "976fed06-aa56-4693-e02a-88ea766c252f"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show(close=None, block=None)>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The distribution of scores are similar to each other with peaks being at 0.167. India has the most frequency since it is reprsentive of the data. Since bias score has the same trends, it might not be the best indicator for predicting. "
      ],
      "metadata": {
        "id": "Zwk_HTpe9_zk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "mzysb5FM94OI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###### Plot of Bias Distribution in Each Country Explanation:\n",
        "The x axis contains each country and the y axis contains the frequency of different levels of bias in each country. The legend shows how each color represents a different level of bias. This plot shows how India has a wide range of biases in headlines but South Africa has the narrowest range of bias in headlines. "
      ],
      "metadata": {
        "id": "VcxJYRsEqNhN"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "lacKwQHyyqxI",
        "outputId": "a79100b0-3f21-4161-b586-39ed1ff8aa77"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Frequency')"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "headlines_chart = headlines['country'].value_counts().plot(kind='bar',\n",
        "                                    # figsize=(18,8),\n",
        "                                    # ylim=(0,400),\n",
        "                                    title=\"Bar Chart Showing Frequency By Country\")\n",
        "headlines_chart.set_xlabel(\"Country\")\n",
        "headlines_chart.set_ylabel(\"Frequency\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5ZjXJyikBzdq"
      },
      "source": [
        "# Type of Prediction (Logistic Regression and Random Forest Classifier)\n",
        "###### By Claudia Pascual"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aZg26mEpCAFC"
      },
      "source": [
        "Split into test/train data\n",
        "* Using headline predict country it comes from \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qHepFRj0B_cj",
        "outputId": "8afa92ab-fe42-41eb-bfb6-809db819d4e5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.6389019730988643\n"
          ]
        }
      ],
      "source": [
        "X = headlines['headline_no_site']\n",
        "y = headlines['country']\n",
        "#headlines\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
        "\n",
        "vect=CountVectorizer(stop_words='english')\n",
        "vectorizer = vect.fit(X_train)\n",
        "vectorizer2 = vect.fit(X_test)\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "y_train = label_encoder.fit_transform(y_train)\n",
        "y_test = label_encoder.fit_transform(y_test)  \n",
        "\n",
        "# Get word counts for training and test sets\n",
        "X_train = vectorizer.transform(X_train)\n",
        "X_test = vectorizer2.transform(X_test)\n",
        "tf_transformer = TfidfTransformer(use_idf=False).fit(X_train)\n",
        "X_train = tf_transformer.transform(X_train)\n",
        "tf_transformer2 = TfidfTransformer(use_idf=False).fit(X_test)\n",
        "X_test = tf_transformer2.transform(X_test)\n",
        "#X_train['bias'] = one_hot.transform(X_train['bias'])\n",
        "#X_test['bias'] = one_hot.transform(X_test['bias'])\n",
        "\n",
        "classifier = LogisticRegression(max_iter=2000)\n",
        "#classifier = RandomForestClassifier(n_jobs=-1, class_weight='balanced')\n",
        "classifier.fit(X_train, y_train)\n",
        "score = classifier.score(X_test, y_test)\n",
        "print(\"Accuracy:\", score)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rKITWKN_InwQ",
        "outputId": "09236bad-814c-404a-a4ae-6e54ec8318a4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['India' 'South Africa' 'UK' 'USA']\n"
          ]
        }
      ],
      "source": [
        "print(label_encoder.classes_)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H1irUJWhMIBk",
        "outputId": "46fee13c-1e69-435a-cad1-a417afb7c02c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.69      0.68      0.69     27603\n",
            "           1       0.89      0.38      0.53      3738\n",
            "           2       0.61      0.59      0.60     22039\n",
            "           3       0.60      0.67      0.63     23048\n",
            "\n",
            "    accuracy                           0.64     76428\n",
            "   macro avg       0.69      0.58      0.61     76428\n",
            "weighted avg       0.65      0.64      0.64     76428\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(classification_report(y_test,classifier.predict(X_test)))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The accuracy is low in predicitng the country with the titles words so to see if we can get a higher accuracy score, test with the bias score."
      ],
      "metadata": {
        "id": "5HmXsE5TAWV9"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B4y4dE6YHMtE"
      },
      "source": [
        "VIEW Bag of Words"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "HYrjf0LLHVJB",
        "outputId": "0295ab03-efb2-4021-8af9-5d560996017e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 33.0, 'Predicted label')"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#print(\"Vocab for Train:\", len(vectorizer.vocabulary_), vectorizer.vocabulary_)\n",
        "#print(\"Vocab for Test:\", len(vectorizer2.vocabulary_), vectorizer2.vocabulary_)\n",
        "conf_matrix = confusion_matrix(y_test, classifier.predict(X_test))\n",
        "fig, ax = plt.subplots(figsize=(8, 6))\n",
        "df_cm = pd.DataFrame(conf_matrix, index=classifier.classes_, columns=classifier.classes_)\n",
        "sns.heatmap(df_cm,annot=True, fmt=\"d\", ax=ax)\n",
        "plt.ylabel('True label')\n",
        "plt.xlabel('Predicted label')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UJfYbWlaHL2I",
        "outputId": "9a11f666-7cec-40f3-f974-dbc05de83c64"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lowest tfdif ['lalbaug' 'jamson' 'jangles' 'janhvis' 'janjua' 'janka' 'jankowicz'\n",
            " 'jans' 'japans' 'jarmond']\n",
            "Highest tfdif ['world' 'insider' 'driven' 'word' 'making' 'stage' 'change' 'st'\n",
            " 'masters' 'nation']\n"
          ]
        }
      ],
      "source": [
        "max_value = X_train.max(axis=0).toarray().ravel()\n",
        "sorted_by_tfidf = max_value.argsort()\n",
        "feature_names = vectorizer.get_feature_names_out()\n",
        "print(\"Lowest tfdif\", feature_names[sorted_by_tfidf[:10]])\n",
        "print(\"Highest tfdif\", feature_names[sorted_by_tfidf[-10:]])"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Words associated in articles to women seem to be love, bomshell, unbreakable. "
      ],
      "metadata": {
        "id": "XruvSzAsBEsU"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "hECAecRHLfeB"
      },
      "outputs": [],
      "source": [
        "#(shap_values, X_test_array, feature_names=vectorizer.get_feature_names())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QwY-BFwkD4ZD"
      },
      "source": [
        "Using healine title and bias score to predict country."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ju2qFrSb-rdF",
        "outputId": "de3ad916-7339-426a-f241-69080bf00d9d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "accuracy 0.597948395875857\n"
          ]
        }
      ],
      "source": [
        "#headlines = headlines[1:1000]\n",
        "X = headlines.drop('country', axis='columns')\n",
        "y = headlines['country']\n",
        "\n",
        "#headlines\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
        "label_encoder = LabelEncoder()\n",
        "y_train = label_encoder.fit_transform(y_train)\n",
        "y_test = label_encoder.fit_transform(y_test)  \n",
        "\n",
        "text_Transformer = Pipeline(steps=[\n",
        "    ('text_conv1', CountVectorizer()),\n",
        "    ('text_conv2', TfidfTransformer(use_idf=False))\n",
        "    ])\n",
        "\n",
        "numeric_features = ['bias']\n",
        "numTransformer = Pipeline(steps=[('scaler', StandardScaler())])\n",
        "#num_Transformer = Pipeline(steps=[('imputer', SimpleImputer()),('one', OneHotEncoder(handle_unknown='ignore'))])\n",
        "\n",
        "ct = ColumnTransformer(\n",
        "transformers=[\n",
        "('bias', numTransformer, numeric_features),\n",
        "('headline', text_Transformer, 'headline_no_site'),\n",
        "])\n",
        "\n",
        "\n",
        "pipeline = Pipeline(steps=[('feature_engineer', ct),('RF', RandomForestClassifier(n_jobs=-1, class_weight='balanced'))])\n",
        "pipeline.fit(X_train, y_train)\n",
        "preds = pipeline.predict(X_test)\n",
        "print('accuracy %s' % accuracy_score(preds, y_test))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 406
        },
        "id": "VyPAxAgnKPbP",
        "outputId": "1dedb9e8-371b-40bd-d71e-4e6a12f86941"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 33.0, 'Predicted label')"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x432 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "conf_matrix2 = confusion_matrix(y_test, pipeline.predict(X_test))\n",
        "fig2, ax2 = plt.subplots(figsize=(8, 6))\n",
        "df2 = pd.DataFrame(conf_matrix2, index=pipeline.classes_, columns=pipeline.classes_)\n",
        "sns.heatmap(df2,annot=True, fmt=\"d\", ax=ax2)\n",
        "plt.ylabel('True label')\n",
        "plt.xlabel('Predicted label')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k1OVGJNDX2jR",
        "outputId": "b80780c7-6a6b-4620-cbc4-9b235790b974"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.62      0.70      0.66     27712\n",
            "           1       0.90      0.34      0.49      3685\n",
            "           2       0.59      0.51      0.55     21917\n",
            "           3       0.56      0.60      0.58     23114\n",
            "\n",
            "    accuracy                           0.60     76428\n",
            "   macro avg       0.67      0.54      0.57     76428\n",
            "weighted avg       0.61      0.60      0.59     76428\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print(classification_report(y_test,pipeline.predict(X_test)))"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "PGEv9bObAmT2"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The accuracy stayed about the same and if not lower ast times since based on graph of bias score frequency graph, it indicated not the most descriptive indicator but since also using tfidif of words thought it could stregthnen the predictivness. "
      ],
      "metadata": {
        "id": "tp6gjW4zAmxl"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "jU7AWGrjTO9q"
      },
      "outputs": [],
      "source": [
        "#max_value = X_train.max(axis=0).toarray().ravel()\n",
        "#sorted_by_tfidf = max_value.argsort()\n",
        "#feature_names = pipeline.get_feature_names_out()\n",
        "#print(\"Lowest tfdif\", feature_names[sorted_by_tfidf[:10]])\n",
        "#print(\"Highest tfdif\", feature_names[sorted_by_tfidf[-10:]])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q9Ok336DHCCx"
      },
      "source": [
        "VIEW PIPELINES MADE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 227
        },
        "id": "OzqyCTnGG3mF",
        "outputId": "ed7b3385-9b34-432f-e0bf-1ed95e139af0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('feature_engineer',\n",
              "                 ColumnTransformer(transformers=[('bias',\n",
              "                                                  Pipeline(steps=[('scaler',\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  ['bias']),\n",
              "                                                 ('headline',\n",
              "                                                  Pipeline(steps=[('text_conv1',\n",
              "                                                                   CountVectorizer()),\n",
              "                                                                  ('text_conv2',\n",
              "                                                                   TfidfTransformer(use_idf=False))]),\n",
              "                                                  'headline_no_site')])),\n",
              "                ('RF',\n",
              "                 RandomForestClassifier(class_weight='balanced', n_jobs=-1))])"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;feature_engineer&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;bias&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  [&#x27;bias&#x27;]),\n",
              "                                                 (&#x27;headline&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;text_conv1&#x27;,\n",
              "                                                                   CountVectorizer()),\n",
              "                                                                  (&#x27;text_conv2&#x27;,\n",
              "                                                                   TfidfTransformer(use_idf=False))]),\n",
              "                                                  &#x27;headline_no_site&#x27;)])),\n",
              "                (&#x27;RF&#x27;,\n",
              "                 RandomForestClassifier(class_weight=&#x27;balanced&#x27;, n_jobs=-1))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;feature_engineer&#x27;,\n",
              "                 ColumnTransformer(transformers=[(&#x27;bias&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;scaler&#x27;,\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  [&#x27;bias&#x27;]),\n",
              "                                                 (&#x27;headline&#x27;,\n",
              "                                                  Pipeline(steps=[(&#x27;text_conv1&#x27;,\n",
              "                                                                   CountVectorizer()),\n",
              "                                                                  (&#x27;text_conv2&#x27;,\n",
              "                                                                   TfidfTransformer(use_idf=False))]),\n",
              "                                                  &#x27;headline_no_site&#x27;)])),\n",
              "                (&#x27;RF&#x27;,\n",
              "                 RandomForestClassifier(class_weight=&#x27;balanced&#x27;, n_jobs=-1))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">feature_engineer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;bias&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;scaler&#x27;, StandardScaler())]),\n",
              "                                 [&#x27;bias&#x27;]),\n",
              "                                (&#x27;headline&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;text_conv1&#x27;,\n",
              "                                                  CountVectorizer()),\n",
              "                                                 (&#x27;text_conv2&#x27;,\n",
              "                                                  TfidfTransformer(use_idf=False))]),\n",
              "                                 &#x27;headline_no_site&#x27;)])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">bias</label><div class=\"sk-toggleable__content\"><pre>[&#x27;bias&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">headline</label><div class=\"sk-toggleable__content\"><pre>headline_no_site</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CountVectorizer</label><div class=\"sk-toggleable__content\"><pre>CountVectorizer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">TfidfTransformer</label><div class=\"sk-toggleable__content\"><pre>TfidfTransformer(use_idf=False)</pre></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(class_weight=&#x27;balanced&#x27;, n_jobs=-1)</pre></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "#text_Transformer\n",
        "#numTransformer\n",
        "#ct\n",
        "pipeline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EfMHz_njECro"
      },
      "source": [
        "Observation: Since all bias was calculated by author, it made the accuracy increase. Note that we did change it to a RandomForestClassifier."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1UG84hd55b-I"
      },
      "source": [
        "# Decision Tree \n",
        "###### By Surya Brunton"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KIHxx0gm5b-O"
      },
      "source": [
        "The decision tree can be used to make predictions for future data points. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "4-ExueCH5b-O"
      },
      "outputs": [],
      "source": [
        "from sklearn import tree\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "LDLSIBN85b-O",
        "outputId": "c3df65c0-adbc-44f5-9fe3-7ea038ec3569"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index  Unnamed: 0  Unnamed: 0.1  year country       word  frequency  count  \\\n",
              "0      0          12           277  2010   India  cricketer          0   1584   \n",
              "1      1          13           278  2011   India  cricketer          0   2438   \n",
              "2      2          14           279  2012   India  cricketer          0   3634   \n",
              "3      3          15           280  2013   India  cricketer          4   4910   \n",
              "4      4          16           281  2014   India  cricketer          6   7502   \n",
              "\n",
              "   freq_prop_headlines  word_len  freq_rank  hfreq_rank        theme  \n",
              "0             0.000000         9         20          20  empowerment  \n",
              "1             0.000000         9         20          20  empowerment  \n",
              "2             0.000000         9         20          20  empowerment  \n",
              "3             0.000815         9         20          20  empowerment  \n",
              "4             0.000800         9         20          20  empowerment  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7494244b-5f1d-464d-9aa0-85e0a2df6b3e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>Unnamed: 0.1</th>\n",
              "      <th>year</th>\n",
              "      <th>country</th>\n",
              "      <th>word</th>\n",
              "      <th>frequency</th>\n",
              "      <th>count</th>\n",
              "      <th>freq_prop_headlines</th>\n",
              "      <th>word_len</th>\n",
              "      <th>freq_rank</th>\n",
              "      <th>hfreq_rank</th>\n",
              "      <th>theme</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>277</td>\n",
              "      <td>2010</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>0</td>\n",
              "      <td>1584</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>13</td>\n",
              "      <td>278</td>\n",
              "      <td>2011</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>0</td>\n",
              "      <td>2438</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>14</td>\n",
              "      <td>279</td>\n",
              "      <td>2012</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>0</td>\n",
              "      <td>3634</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "      <td>280</td>\n",
              "      <td>2013</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>4</td>\n",
              "      <td>4910</td>\n",
              "      <td>0.000815</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>16</td>\n",
              "      <td>281</td>\n",
              "      <td>2014</td>\n",
              "      <td>India</td>\n",
              "      <td>cricketer</td>\n",
              "      <td>6</td>\n",
              "      <td>7502</td>\n",
              "      <td>0.000800</td>\n",
              "      <td>9</td>\n",
              "      <td>20</td>\n",
              "      <td>20</td>\n",
              "      <td>empowerment</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7494244b-5f1d-464d-9aa0-85e0a2df6b3e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7494244b-5f1d-464d-9aa0-85e0a2df6b3e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7494244b-5f1d-464d-9aa0-85e0a2df6b3e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "cTf = pd.read_csv(\"country_time_freqrank.csv\")\n",
        "cTf.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "0iY8jEYt5b-P",
        "outputId": "d3870af6-0d28-40dc-b250-50023f5d22fa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       year  frequency   count  word_len  freq_rank  hfreq_rank\n",
              "index                                                          \n",
              "7615   2017        243  312298         4        941         941\n",
              "7616   2018        159  352387         4        941         941\n",
              "7617   2019        159  380716         4        941         941\n",
              "7618   2020        114  381402         4        941         941\n",
              "7619   2021         51  234227         4        941         941"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc7c73e4-eebc-45bc-a6ef-a1134c363f54\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>frequency</th>\n",
              "      <th>count</th>\n",
              "      <th>word_len</th>\n",
              "      <th>freq_rank</th>\n",
              "      <th>hfreq_rank</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>index</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7615</th>\n",
              "      <td>2017</td>\n",
              "      <td>243</td>\n",
              "      <td>312298</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7616</th>\n",
              "      <td>2018</td>\n",
              "      <td>159</td>\n",
              "      <td>352387</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7617</th>\n",
              "      <td>2019</td>\n",
              "      <td>159</td>\n",
              "      <td>380716</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7618</th>\n",
              "      <td>2020</td>\n",
              "      <td>114</td>\n",
              "      <td>381402</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7619</th>\n",
              "      <td>2021</td>\n",
              "      <td>51</td>\n",
              "      <td>234227</td>\n",
              "      <td>4</td>\n",
              "      <td>941</td>\n",
              "      <td>941</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc7c73e4-eebc-45bc-a6ef-a1134c363f54')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bc7c73e4-eebc-45bc-a6ef-a1134c363f54 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bc7c73e4-eebc-45bc-a6ef-a1134c363f54');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "data = cTf\n",
        "\n",
        "data = data.drop('Unnamed: 0',axis=1)\n",
        "data = data.drop('Unnamed: 0.1',axis=1)\n",
        "data = data.drop('word',axis=1)\n",
        "data = data.drop('freq_prop_headlines',axis=1)\n",
        "data = data.drop('theme',axis=1)\n",
        "data = data.drop('country',axis=1)\n",
        "data = data.set_index('index')\n",
        "\n",
        "\n",
        "data.tail()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "Vbl7toEN5b-P"
      },
      "outputs": [],
      "source": [
        "features = ['frequency', 'count', 'word_len', 'freq_rank', 'hfreq_rank']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qO49VLNF5b-P",
        "outputId": "bf40322d-e3b1-45fc-b9ef-8bdb70ef0e63"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7620"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "data.year.count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "XOsWa09M5b-P"
      },
      "outputs": [],
      "source": [
        "# remove 12 data points, one for each year, for testing \n",
        "data_point_with_year_2010_index = (data.year.values == 2010).argmax()\n",
        "data_point_with_year_2010 = data.iloc[data_point_with_year_2010_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2010_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2011_index = (data.year.values == 2011).argmax()\n",
        "data_point_with_year_2011 = data.iloc[data_point_with_year_2011_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2011_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2012_index = (data.year.values == 2012).argmax()\n",
        "data_point_with_year_2012 = data.iloc[data_point_with_year_2012_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2012_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2013_index = (data.year.values == 2013).argmax()\n",
        "data_point_with_year_2013 = data.iloc[data_point_with_year_2013_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2013_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2014_index = (data.year.values == 2014).argmax()\n",
        "data_point_with_year_2014 = data.iloc[data_point_with_year_2014_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2014_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2015_index = (data.year.values == 2015).argmax()\n",
        "data_point_with_year_2015 = data.iloc[data_point_with_year_2015_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2015_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2016_index = (data.year.values == 2016).argmax()\n",
        "data_point_with_year_2016 = data.iloc[data_point_with_year_2016_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2016_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2017_index = (data.year.values == 2017).argmax()\n",
        "data_point_with_year_2017 = data.iloc[data_point_with_year_2017_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2017_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2018_index = (data.year.values == 2018).argmax()\n",
        "data_point_with_year_2018 = data.iloc[data_point_with_year_2018_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2018_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2019_index = (data.year.values == 2019).argmax()\n",
        "data_point_with_year_2019 = data.iloc[data_point_with_year_2019_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2019_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2020_index = (data.year.values == 2020).argmax()\n",
        "data_point_with_year_2020 = data.iloc[data_point_with_year_2020_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2020_index)\n",
        "data.reset_index(drop=True,inplace=True)\n",
        "\n",
        "data_point_with_year_2021_index = (data.year.values == 2021).argmax()\n",
        "data_point_with_year_2021 = data.iloc[data_point_with_year_2021_index,:].drop('year').values\n",
        "data = data.drop(data_point_with_year_2021_index)\n",
        "data.reset_index(drop=True,inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D4GbICE15b-P",
        "outputId": "0c1a0178-fbfc-4138-a61c-89b5bb1b8c83"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7608"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "data.year.count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "2gFpR_uI5b-P"
      },
      "outputs": [],
      "source": [
        "# create a fake data point for testing \n",
        "fake_data_point = [56, 12622, 9, 20, 20]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9iigsP_A5b-P",
        "outputId": "58ef9e14-435a-4ea5-f01c-01a3b394182a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7608"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "data.year.count()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 683
        },
        "id": "uQo0FMO85b-P",
        "outputId": "b5955212-b704-47d3-eaaf-e6bfe0f0cae1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1584x864 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "X = data[features]\n",
        "y = data['year']\n",
        "\n",
        "# create and train model\n",
        "dtree = tree.DecisionTreeClassifier(max_depth=4)  # set hyperparameter\n",
        "dtree.fit(X.values, y)\n",
        "\n",
        "# plot tree\n",
        "plt.figure(figsize=(22,12))  # set plot size (denoted in inches)\n",
        "tree.plot_tree(dtree, feature_names=features, fontsize=10)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x3gQlrM-5b-P"
      },
      "source": [
        "The decision tree should be able to correctly predict the country of a point given its headline details."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nz4FgoPa5b-Q",
        "outputId": "bc6b2d69-f8bb-4652-9862-eb4b956f3539"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Expected 2010, predicted  [2010]\n",
            "Expected 2011, predicted  [2011]\n",
            "Expected 2012, predicted  [2012]\n",
            "Expected 2013, predicted  [2012]\n",
            "Expected 2014, predicted  [2014]\n",
            "Expected 2015, predicted  [2015]\n",
            "Expected 2016, predicted  [2018]\n",
            "Expected 2017, predicted  [2018]\n",
            "Expected 2018, predicted  [2018]\n",
            "Expected 2019, predicted  [2018]\n",
            "Expected 2020, predicted  [2018]\n",
            "Expected 2021, predicted  [2017]\n",
            "Predicting fake data point:  [2017]\n"
          ]
        }
      ],
      "source": [
        "# test values\n",
        "print('Expected 2010, predicted ', dtree.predict([data_point_with_year_2010]))\n",
        "print('Expected 2011, predicted ', dtree.predict([data_point_with_year_2011]))\n",
        "print('Expected 2012, predicted ', dtree.predict([data_point_with_year_2012]))\n",
        "print('Expected 2013, predicted ', dtree.predict([data_point_with_year_2013]))\n",
        "print('Expected 2014, predicted ', dtree.predict([data_point_with_year_2014]))\n",
        "print('Expected 2015, predicted ', dtree.predict([data_point_with_year_2015]))\n",
        "print('Expected 2016, predicted ', dtree.predict([data_point_with_year_2016]))\n",
        "print('Expected 2017, predicted ', dtree.predict([data_point_with_year_2017]))\n",
        "print('Expected 2018, predicted ', dtree.predict([data_point_with_year_2018]))\n",
        "print('Expected 2019, predicted ', dtree.predict([data_point_with_year_2019]))\n",
        "print('Expected 2020, predicted ', dtree.predict([data_point_with_year_2020]))\n",
        "print('Expected 2021, predicted ', dtree.predict([data_point_with_year_2021]))\n",
        "\n",
        "# new fake value \n",
        "print('Predicting fake data point: ', dtree.predict([fake_data_point]))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uKgstww_5b-Q"
      },
      "source": [
        "We also generated other decision trees with more levels (e.g. 5, 6, 7 and 8 levels) as well as using other features (e.g. removing `count`). However, these trees were not any more accurate.\n",
        "\n",
        "The test values show that the decision tree is fairly capable of predicting the theme of a data point, with predictions falling within a 3 year range of the real year. We can conclude that the characteristics of a headline is signifying of the time period (range of years) it was published. \n",
        "\n",
        "This is interesting as we had expected that there would not be a strong relationship between the decision tree and headlines characteristics. However, the results show that headline charactertics were characteric of their year period. This may be because readers' interests and behaviour may have changed, for example at one time period they may have prefered longer, more descriptive headlines while at other time periods they may have preferred shorter headlines with 'buzzwords'. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OVCmc9K4B9eh"
      },
      "source": [
        "# Test Prediction"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L5w7xxwqXznL"
      },
      "source": [
        "# Naive Bayes' Algorithm\n",
        "###### by Trisha Agrawal"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 110
        },
        "id": "N1yx58iQXy-2",
        "outputId": "8d32e420-247f-4b25-94df-a9dc0e12259d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Words randomly chosen:\n",
            "Worth Mayor Activist Force Black March Trafficking Shame Drama Appoint Cry "
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GaussianNB()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "encoder = preprocessing.LabelEncoder()\n",
        "# randomly pick 12 words to avoid our own bias\n",
        "cols2 = random.choices(list(cTf['word']),k=12) \n",
        "print(\"Words randomly chosen:\")\n",
        "words = list(cols2)\n",
        "for i in range(0,11):\n",
        "  print(words[i].title(),end=\" \")\n",
        "# randomly pick some frequencies to train the model\n",
        "freq =  random.choices(list(cTf['frequency']),k=12)\n",
        "# there are 12 years in this study\n",
        "yearUsed = np.unique(list(cTf['year']))\n",
        "words_encoded = encoder.fit_transform(words)\n",
        "freq_encoded = encoder.fit_transform(freq)\n",
        "label = encoder.fit_transform(yearUsed)\n",
        "results = zip(freq_encoded,words_encoded)\n",
        "results = list(results)\n",
        "model = GaussianNB()\n",
        "model.fit(results,label)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U-FaoKGcvm1k",
        "outputId": "be62581c-2760-4674-bb1c-8eff38413983"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Word chosen: Cry\n",
            "Frequency chosen: 411\n",
            "Predicted Year: 2010\n",
            "\"Cry\" is predicted to have been used about 411 time(s) in 2010.\n"
          ]
        }
      ],
      "source": [
        "# randomly pick one word from the 12 random words\n",
        "wordPicked = random.randint(0,11)\n",
        "# randomly pick one freq from the 12 randmo freq\n",
        "freqPicked = random.choices(freq)[0]\n",
        "# predict using those parameters\n",
        "predicted = model.predict([[wordPicked,freqPicked]])\n",
        "print(\"Word chosen:\", words[wordPicked].title())\n",
        "print(\"Frequency chosen:\", freqPicked)\n",
        "print(\"Predicted Year:\", yearUsed[predicted][0])\n",
        "print('\"' + words[wordPicked].title() +'\"' + \" is predicted to have been used about \"\\\n",
        "      + str(freqPicked) + \" time(s) in \" + str(yearUsed[predicted][0]) + '.')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###### Naive Bayes' Algorithm Explanation:\n",
        "12 words are randomly chosen to train the model in order to prevent bias in the training set. The number selected is 12 because the data set only contains 12 years. The values were encoded to numeric values since Naive Bayes' Algorithm does not work with text. A prediction is made when the algorithm is fed a word and frequency. \n",
        "\n",
        "The interpretation of the prediction is in this format: \"***Chosen word*** is predicted to have been used about ***frequency*** times in ***chosen year***\""
      ],
      "metadata": {
        "id": "LIDKsqWAq5D4"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Hm88crNa7cVV"
      },
      "source": [
        "## KNN Regression\n",
        "\n",
        "Islam Dafaalla"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "IBkp79IhK4HS"
      },
      "outputs": [],
      "source": [
        "#reference: https://towardsdatascience.com/knn-regression-model-in-python-9868f21c9fa2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "WMtkWyPA8jBs",
        "outputId": "ee84f4fe-ad4f-4b73-ec89-1cc307e63f13"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index  Unnamed: 0                                   headline_no_site  \\\n",
              "0      0      252454  ‘Cashed up’ Mother Teresa kept Vatican Bank af...   \n",
              "1      1      349953  Half dressed woman videobombs Spanish journali...   \n",
              "2      2      285795  Over 50 Women Journalists Support Reporter Beh...   \n",
              "3      3       56832  Ramani's acquittal in defamation case vindicat...   \n",
              "4      4      212021  Journalist Told She Was ‘Too Ugly’ For Selfies...   \n",
              "\n",
              "                           site                       time country      bias  \\\n",
              "0                        rt.com  2017-11-09 08:00:00+00:00     USA  0.166667   \n",
              "1              timesnownews.com  2020-04-29 07:00:00+00:00   India  0.166667   \n",
              "2                    thewire.in  2017-03-23 07:00:00+00:00   India  0.166667   \n",
              "3  economictimes.indiatimes.com  2021-02-18 08:00:00+00:00   India  0.166667   \n",
              "4                  unilad.co.uk  2019-09-10 07:00:00+00:00      UK  0.166667   \n",
              "\n",
              "   year  \n",
              "0  2017  \n",
              "1  2020  \n",
              "2  2017  \n",
              "3  2021  \n",
              "4  2019  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2f22a38c-0d1c-44ab-9b32-d2dd5fd016de\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>headline_no_site</th>\n",
              "      <th>site</th>\n",
              "      <th>time</th>\n",
              "      <th>country</th>\n",
              "      <th>bias</th>\n",
              "      <th>year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>252454</td>\n",
              "      <td>‘Cashed up’ Mother Teresa kept Vatican Bank af...</td>\n",
              "      <td>rt.com</td>\n",
              "      <td>2017-11-09 08:00:00+00:00</td>\n",
              "      <td>USA</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>349953</td>\n",
              "      <td>Half dressed woman videobombs Spanish journali...</td>\n",
              "      <td>timesnownews.com</td>\n",
              "      <td>2020-04-29 07:00:00+00:00</td>\n",
              "      <td>India</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>2020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>285795</td>\n",
              "      <td>Over 50 Women Journalists Support Reporter Beh...</td>\n",
              "      <td>thewire.in</td>\n",
              "      <td>2017-03-23 07:00:00+00:00</td>\n",
              "      <td>India</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>2017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>56832</td>\n",
              "      <td>Ramani's acquittal in defamation case vindicat...</td>\n",
              "      <td>economictimes.indiatimes.com</td>\n",
              "      <td>2021-02-18 08:00:00+00:00</td>\n",
              "      <td>India</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>2021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>212021</td>\n",
              "      <td>Journalist Told She Was ‘Too Ugly’ For Selfies...</td>\n",
              "      <td>unilad.co.uk</td>\n",
              "      <td>2019-09-10 07:00:00+00:00</td>\n",
              "      <td>UK</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>2019</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f22a38c-0d1c-44ab-9b32-d2dd5fd016de')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2f22a38c-0d1c-44ab-9b32-d2dd5fd016de button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2f22a38c-0d1c-44ab-9b32-d2dd5fd016de');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "%matplotlib inline\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "\n",
        "\n",
        "hT = pd.read_csv(\"headlines_reduced_temporal.csv\")\n",
        "hT.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ps4lyqMz8mD0",
        "outputId": "b0f58aa9-0cca-4d84-f96a-64d863e7ca7b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "index                 int64\n",
            "Unnamed: 0            int64\n",
            "headline_no_site     object\n",
            "site                 object\n",
            "time                 object\n",
            "country              object\n",
            "bias                float64\n",
            "year                  int64\n",
            "dtype: object\n"
          ]
        }
      ],
      "source": [
        "print(hT.dtypes)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "id": "EP7oSOvp8_mo"
      },
      "outputs": [],
      "source": [
        "#data cleaning\n",
        "hT =  hT.drop(columns = [\"Unnamed: 0\"])\n",
        "hT = hT.drop_duplicates()\n",
        "hT = hT.dropna()\n",
        "\n",
        "##change countrys to number values\n",
        "from sklearn import preprocessing\n",
        "label = preprocessing.LabelEncoder()\n",
        "label.fit(hT[\"country\"])\n",
        "hT[\"country\"] = label.transform(hT[\"country\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "EU3C-wp19FVV"
      },
      "outputs": [],
      "source": [
        "##change sites to number values\n",
        "label2 = preprocessing.LabelEncoder()\n",
        "label2.fit(hT[\"site\"])\n",
        "hT[\"site\"] = label.fit_transform(hT[\"site\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "miC0OJZhRET_"
      },
      "outputs": [],
      "source": [
        "#normalize site and year columns\n",
        "\n",
        "hT['site'] = (hT['site'] - hT['site'].mean()) / hT['site'].std()\n",
        "hT['year'] = (hT['year'] - hT['year'].mean()) / hT['year'].std()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "rVi4H6WI9NFq",
        "outputId": "d4539a86-27b6-4319-c373-1d6f8a93c24c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index                                   headline_no_site      site  \\\n",
              "0      0  ‘Cashed up’ Mother Teresa kept Vatican Bank af...  0.727058   \n",
              "1      1  Half dressed woman videobombs Spanish journali...  1.492382   \n",
              "2      2  Over 50 Women Journalists Support Reporter Beh...  1.393630   \n",
              "3      3  Ramani's acquittal in defamation case vindicat... -0.877654   \n",
              "4      4  Journalist Told She Was ‘Too Ugly’ For Selfies...  1.566445   \n",
              "\n",
              "                        time  country      bias      year  \n",
              "0  2017-11-09 08:00:00+00:00        3  0.166667 -0.060476  \n",
              "1  2020-04-29 07:00:00+00:00        0  0.166667  1.002088  \n",
              "2  2017-03-23 07:00:00+00:00        0  0.166667 -0.060476  \n",
              "3  2021-02-18 08:00:00+00:00        0  0.166667  1.356276  \n",
              "4  2019-09-10 07:00:00+00:00        2  0.166667  0.647900  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-05dfafe9-1674-4848-adf8-9b2c4c93dbcd\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>headline_no_site</th>\n",
              "      <th>site</th>\n",
              "      <th>time</th>\n",
              "      <th>country</th>\n",
              "      <th>bias</th>\n",
              "      <th>year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>‘Cashed up’ Mother Teresa kept Vatican Bank af...</td>\n",
              "      <td>0.727058</td>\n",
              "      <td>2017-11-09 08:00:00+00:00</td>\n",
              "      <td>3</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>-0.060476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Half dressed woman videobombs Spanish journali...</td>\n",
              "      <td>1.492382</td>\n",
              "      <td>2020-04-29 07:00:00+00:00</td>\n",
              "      <td>0</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>1.002088</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Over 50 Women Journalists Support Reporter Beh...</td>\n",
              "      <td>1.393630</td>\n",
              "      <td>2017-03-23 07:00:00+00:00</td>\n",
              "      <td>0</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>-0.060476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Ramani's acquittal in defamation case vindicat...</td>\n",
              "      <td>-0.877654</td>\n",
              "      <td>2021-02-18 08:00:00+00:00</td>\n",
              "      <td>0</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>1.356276</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Journalist Told She Was ‘Too Ugly’ For Selfies...</td>\n",
              "      <td>1.566445</td>\n",
              "      <td>2019-09-10 07:00:00+00:00</td>\n",
              "      <td>2</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.647900</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05dfafe9-1674-4848-adf8-9b2c4c93dbcd')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-05dfafe9-1674-4848-adf8-9b2c4c93dbcd button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-05dfafe9-1674-4848-adf8-9b2c4c93dbcd');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "hT.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "9NPfCAyb_f5h",
        "outputId": "e6cd013a-3f26-439e-91b0-f936dabe9e98"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            index      site   country      bias      year\n",
              "index    1.000000 -0.048265  0.047707  0.045028 -0.111267\n",
              "site    -0.048265  1.000000  0.076258 -0.008686  0.054193\n",
              "country  0.047707  0.076258  1.000000  0.030418 -0.080658\n",
              "bias     0.045028 -0.008686  0.030418  1.000000  0.028641\n",
              "year    -0.111267  0.054193 -0.080658  0.028641  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e5c99caa-d7aa-49e0-943f-c3c571c1acdb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>site</th>\n",
              "      <th>country</th>\n",
              "      <th>bias</th>\n",
              "      <th>year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>index</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.048265</td>\n",
              "      <td>0.047707</td>\n",
              "      <td>0.045028</td>\n",
              "      <td>-0.111267</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>site</th>\n",
              "      <td>-0.048265</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.076258</td>\n",
              "      <td>-0.008686</td>\n",
              "      <td>0.054193</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>0.047707</td>\n",
              "      <td>0.076258</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.030418</td>\n",
              "      <td>-0.080658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bias</th>\n",
              "      <td>0.045028</td>\n",
              "      <td>-0.008686</td>\n",
              "      <td>0.030418</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.028641</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>-0.111267</td>\n",
              "      <td>0.054193</td>\n",
              "      <td>-0.080658</td>\n",
              "      <td>0.028641</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5c99caa-d7aa-49e0-943f-c3c571c1acdb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e5c99caa-d7aa-49e0-943f-c3c571c1acdb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e5c99caa-d7aa-49e0-943f-c3c571c1acdb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ],
      "source": [
        "hT.corr()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "j9Yx1Ul3Q4Gi",
        "outputId": "06f4194a-1355-4b5c-c483-d373e4237e02"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.heatmap(hT.corr())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "id": "Dxgl1SlR-Lv_"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "X = hT[['site','country', 'year']]\n",
        "y = hT['bias']\n",
        "\n",
        "\n",
        "##split the data into training and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split (X,y,test_size = 0.2, random_state =12)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "r59ivqtYAVkx",
        "outputId": "a01afe37-d16f-4e71-f17b-1951efa1bc32"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          count      mean       std       min       25%       50%       75%  \\\n",
              "site     1504.0  0.001802  1.004843 -1.840481 -0.828278 -0.062954  0.825809   \n",
              "country  1504.0  1.487367  1.237515  0.000000  0.000000  2.000000  3.000000   \n",
              "year     1504.0 -0.017144  1.008748 -4.310730 -0.503211  0.293712  0.647900   \n",
              "\n",
              "              max  \n",
              "site     1.838012  \n",
              "country  3.000000  \n",
              "year     1.356276  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7478451d-133c-4899-80f5-074225ec5965\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>site</th>\n",
              "      <td>1504.0</td>\n",
              "      <td>0.001802</td>\n",
              "      <td>1.004843</td>\n",
              "      <td>-1.840481</td>\n",
              "      <td>-0.828278</td>\n",
              "      <td>-0.062954</td>\n",
              "      <td>0.825809</td>\n",
              "      <td>1.838012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>country</th>\n",
              "      <td>1504.0</td>\n",
              "      <td>1.487367</td>\n",
              "      <td>1.237515</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>1504.0</td>\n",
              "      <td>-0.017144</td>\n",
              "      <td>1.008748</td>\n",
              "      <td>-4.310730</td>\n",
              "      <td>-0.503211</td>\n",
              "      <td>0.293712</td>\n",
              "      <td>0.647900</td>\n",
              "      <td>1.356276</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7478451d-133c-4899-80f5-074225ec5965')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7478451d-133c-4899-80f5-074225ec5965 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7478451d-133c-4899-80f5-074225ec5965');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ],
      "source": [
        "#check overall statistics of training features\n",
        "X_train.describe().T\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u8HYH6rH-zl7",
        "outputId": "34b45b72-750b-4762-8317-c73ca11e2dfb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of model at K = 2 is -0.5074639597372683\n",
            "Accuracy of model at K = 3 is -0.34085890035732214\n",
            "Accuracy of model at K = 4 is -0.23984901475731446\n",
            "Accuracy of model at K = 5 is -0.20725411584065512\n",
            "Accuracy of model at K = 6 is -0.15153496924374665\n",
            "Accuracy of model at K = 7 is -0.14974400576574554\n"
          ]
        }
      ],
      "source": [
        "from sklearn import metrics\n",
        "\n",
        "#K Neighbors = 2\n",
        "knn_model0 = KNeighborsRegressor(n_neighbors = 2).fit(X_train,y_train)\n",
        "score_0 = knn_model0.score(X_test,y_test)\n",
        "print(\"Accuracy of model at K = 2 is\", score_0)\n",
        "\n",
        "\n",
        "#K Neighbors = 3\n",
        "knn_model1 = KNeighborsRegressor(n_neighbors = 3).fit(X_train,y_train)\n",
        "score_1 = knn_model1.score(X_test,y_test)\n",
        "print(\"Accuracy of model at K = 3 is\", score_1)\n",
        "\n",
        "#K Neighbors = 4\n",
        "knn_model2 = KNeighborsRegressor(n_neighbors = 4).fit(X_train,y_train)\n",
        "score_2 = knn_model2.score(X_test,y_test)\n",
        "Pred_y2 = knn_model2.predict(X_test)\n",
        "\n",
        "print(\"Accuracy of model at K = 4 is\", score_2)\n",
        "\n",
        "#K Neighbors = 5\n",
        "knn_model3 = KNeighborsRegressor(n_neighbors = 5).fit(X_train,y_train)\n",
        "score_3 = knn_model3.score(X_test,y_test)\n",
        "Pred_y3 = knn_model3.predict(X_test)\n",
        "print(\"Accuracy of model at K = 5 is\", score_3)\n",
        "\n",
        "#K Neighbors = 6\n",
        "knn_model4 = KNeighborsRegressor(n_neighbors = 6).fit(X_train,y_train)\n",
        "score_4 = knn_model4.score(X_test,y_test)\n",
        "Pred_y4 = knn_model4.predict(X_test)\n",
        "print(\"Accuracy of model at K = 6 is\", score_4)\n",
        "\n",
        "#K Neighbors = 7\n",
        "knn_model5 = KNeighborsRegressor(n_neighbors = 7).fit(X_train,y_train)\n",
        "score_5 = knn_model5.score(X_test,y_test)\n",
        "Pred_y5 = knn_model5.predict(X_test)\n",
        "print(\"Accuracy of model at K = 7 is\", score_5)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "QexGPxfTIBgW",
        "outputId": "c1419fd2-4526-4aee-f14e-870605dcc0e2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      True Value  Prediction     Error\n",
              "595     0.000000    0.083333 -0.083333\n",
              "207     0.166667    0.000000  0.166667\n",
              "1849    0.166667    0.083333  0.083333\n",
              "1692    0.166667    0.166667  0.000000\n",
              "329     0.166667    0.000000  0.166667\n",
              "...          ...         ...       ...\n",
              "1318    0.166667    0.166667  0.000000\n",
              "314     0.166667    0.166667  0.000000\n",
              "869     0.000000    0.250000 -0.250000\n",
              "405     0.166667    0.250000 -0.083333\n",
              "1754    0.000000    0.166667 -0.166667\n",
              "\n",
              "[376 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c6fac899-a9ab-45a6-810a-235fa7c9ddfa\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>True Value</th>\n",
              "      <th>Prediction</th>\n",
              "      <th>Error</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.083333</td>\n",
              "      <td>-0.083333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>207</th>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1849</th>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.083333</td>\n",
              "      <td>0.083333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1692</th>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>329</th>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.166667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1318</th>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>314</th>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>869</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>-0.250000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>405</th>\n",
              "      <td>0.166667</td>\n",
              "      <td>0.250000</td>\n",
              "      <td>-0.083333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1754</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.166667</td>\n",
              "      <td>-0.166667</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>376 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6fac899-a9ab-45a6-810a-235fa7c9ddfa')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c6fac899-a9ab-45a6-810a-235fa7c9ddfa button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c6fac899-a9ab-45a6-810a-235fa7c9ddfa');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "source": [
        "#check predictions vs actual values\n",
        "predictions = knn_model0.predict(X_test)\n",
        "\n",
        "pf = pd.DataFrame({'True Value': y_test, 'Prediction' : predictions, 'Error' : y_test - predictions})\n",
        "pf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 464
        },
        "id": "OqWJzoceI9S5",
        "outputId": "d115c86c-94b3-4442-ef48-3ce5ac4859c8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.LineCollection at 0x7f969cfb8340>"
            ]
          },
          "metadata": {},
          "execution_count": 54
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x504 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "\n",
        "#plot model\n",
        "plt.figure(figsize = (15,7))\n",
        "ax_x = pf['True Value']\n",
        "ax_y = pf['Prediction']\n",
        "yerr = pf['Error']\n",
        "\n",
        "plt.scatter(range(len(yerr)), yerr, alpha = .5)\n",
        "plt.title(\"Errors - KNN\", size = 15)\n",
        "plt.hlines(y = 0, xmin = 0, xmax = 450, linestyle = '--', color = 'black')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "id": "gz876KUw7i6Q"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bNtHTl2yCgIl"
      },
      "source": [
        "# Extra \n",
        "- We could also use the word_dictionary used for identifying biases and use it to create our own bias calculation (by including other bias words) and compare it to the bias generated by the author. \n",
        "\n",
        "- We could also use the word_themes.csv file where a predictive algorithm can classify a word to be of a specific theme based on a word that is given to the algorithm. This could suggest whether or not specific themes are more common in specific countries or years. An example could be when words in the “empowerment” theme were more commonly used in headlines during election years or other important political events. \n",
        "\n",
        "- Generate a neutral headline for articles. Add a neutral category in the word dictionary"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [
        "Lh8KHs27Bd-x"
      ],
      "provenance": []
    },
    "gpuClass": "standard",
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
